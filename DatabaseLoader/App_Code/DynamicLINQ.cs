#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Bu kod araç tarafından oluşturuldu.
//     Çalışma Zamanı Sürümü:4.0.30319.42000
//
//     Bu dosyada yapılacak değişiklikler yanlış davranışa neden olabilir ve
//     kod yeniden oluşturulursa kaybolur.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class MobileActivityDataContext : System.Data.Linq.DataContext
{
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCall(Call instance);
  partial void UpdateCall(Call instance);
  partial void DeleteCall(Call instance);
  partial void InsertSMSs(SMSs instance);
  partial void UpdateSMSs(SMSs instance);
  partial void DeleteSMSs(SMSs instance);
  partial void InsertCell(Cell instance);
  partial void UpdateCell(Cell instance);
  partial void DeleteCell(Cell instance);
  partial void InsertCellProvinceInteraction(CellProvinceInteraction instance);
  partial void UpdateCellProvinceInteraction(CellProvinceInteraction instance);
  partial void DeleteCellProvinceInteraction(CellProvinceInteraction instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertDateTime(DateTime instance);
  partial void UpdateDateTime(DateTime instance);
  partial void DeleteDateTime(DateTime instance);
  partial void InsertInternetConn(InternetConn instance);
  partial void UpdateInternetConn(InternetConn instance);
  partial void DeleteInternetConn(InternetConn instance);
  partial void InsertProvince(Province instance);
  partial void UpdateProvince(Province instance);
  partial void DeleteProvince(Province instance);
  #endregion
	
	public MobileActivityDataContext(System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(global::DatabaseLoader.Properties.Settings.Default.MobileActivityConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public MobileActivityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MobileActivityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Call> Calls
	{
		get
		{
			return this.GetTable<Call>();
		}
	}
	
	public System.Data.Linq.Table<SMSs> SMSses
	{
		get
		{
			return this.GetTable<SMSs>();
		}
	}
	
	public System.Data.Linq.Table<Cell> Cells
	{
		get
		{
			return this.GetTable<Cell>();
		}
	}
	
	public System.Data.Linq.Table<CellProvinceInteraction> CellProvinceInteractions
	{
		get
		{
			return this.GetTable<CellProvinceInteraction>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<DateTime> DateTimes
	{
		get
		{
			return this.GetTable<DateTime>();
		}
	}
	
	public System.Data.Linq.Table<InternetConn> InternetConns
	{
		get
		{
			return this.GetTable<InternetConn>();
		}
	}
	
	public System.Data.Linq.Table<Province> Provinces
	{
		get
		{
			return this.GetTable<Province>();
		}
	}
}

public partial class Call : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DateID;
	
	private int _CellID;
	
	private int _CountryCode;
	
	private System.Nullable<double> _CallIN;
	
	private System.Nullable<double> _CallOUT;
	
	private EntityRef<Cell> _Cell;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<DateTime> _DateTime;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateIDChanging(string value);
    partial void OnDateIDChanged();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    partial void OnCountryCodeChanging(int value);
    partial void OnCountryCodeChanged();
    partial void OnCallINChanging(System.Nullable<double> value);
    partial void OnCallINChanged();
    partial void OnCallOUTChanging(System.Nullable<double> value);
    partial void OnCallOUTChanged();
    #endregion
	
	public Call()
	{
		this._Cell = default(EntityRef<Cell>);
		this._Country = default(EntityRef<Country>);
		this._DateTime = default(EntityRef<DateTime>);
		OnCreated();
	}
	
	public string DateID
	{
		get
		{
			return this._DateID;
		}
		set
		{
			if ((this._DateID != value))
			{
				if (this._DateTime.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDateIDChanging(value);
				this.SendPropertyChanging();
				this._DateID = value;
				this.SendPropertyChanged("DateID");
				this.OnDateIDChanged();
			}
		}
	}
	
	public int CellID
	{
		get
		{
			return this._CellID;
		}
		set
		{
			if ((this._CellID != value))
			{
				if (this._Cell.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCellIDChanging(value);
				this.SendPropertyChanging();
				this._CellID = value;
				this.SendPropertyChanged("CellID");
				this.OnCellIDChanged();
			}
		}
	}
	
	public int CountryCode
	{
		get
		{
			return this._CountryCode;
		}
		set
		{
			if ((this._CountryCode != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryCodeChanging(value);
				this.SendPropertyChanging();
				this._CountryCode = value;
				this.SendPropertyChanged("CountryCode");
				this.OnCountryCodeChanged();
			}
		}
	}
	
	public System.Nullable<double> CallIN
	{
		get
		{
			return this._CallIN;
		}
		set
		{
			if ((this._CallIN != value))
			{
				this.OnCallINChanging(value);
				this.SendPropertyChanging();
				this._CallIN = value;
				this.SendPropertyChanged("CallIN");
				this.OnCallINChanged();
			}
		}
	}
	
	public System.Nullable<double> CallOUT
	{
		get
		{
			return this._CallOUT;
		}
		set
		{
			if ((this._CallOUT != value))
			{
				this.OnCallOUTChanging(value);
				this.SendPropertyChanging();
				this._CallOUT = value;
				this.SendPropertyChanged("CallOUT");
				this.OnCallOUTChanged();
			}
		}
	}
	
	public Cell Cell
	{
		get
		{
			return this._Cell.Entity;
		}
		set
		{
			Cell previousValue = this._Cell.Entity;
			if (((previousValue != value) 
						|| (this._Cell.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cell.Entity = null;
					previousValue.Calls.Remove(this);
				}
				this._Cell.Entity = value;
				if ((value != null))
				{
					value.Calls.Add(this);
					this._CellID = value.CellID;
				}
				else
				{
					this._CellID = default(int);
				}
				this.SendPropertyChanged("Cell");
			}
		}
	}
	
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.Calls.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.Calls.Add(this);
					this._CountryCode = value.CountryCode;
				}
				else
				{
					this._CountryCode = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public DateTime DateTime
	{
		get
		{
			return this._DateTime.Entity;
		}
		set
		{
			DateTime previousValue = this._DateTime.Entity;
			if (((previousValue != value) 
						|| (this._DateTime.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DateTime.Entity = null;
					previousValue.Calls.Remove(this);
				}
				this._DateTime.Entity = value;
				if ((value != null))
				{
					value.Calls.Add(this);
					this._DateID = value.DateTimeID;
				}
				else
				{
					this._DateID = default(string);
				}
				this.SendPropertyChanged("DateTime");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class SMSs : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DateID;
	
	private int _CellID;
	
	private int _CountryCode;
	
	private System.Nullable<double> _SMSIN;
	
	private System.Nullable<double> _SMSOUT;
	
	private EntityRef<Cell> _Cell;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<DateTime> _DateTime;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateIDChanging(string value);
    partial void OnDateIDChanged();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    partial void OnCountryCodeChanging(int value);
    partial void OnCountryCodeChanged();
    partial void OnSMSINChanging(System.Nullable<double> value);
    partial void OnSMSINChanged();
    partial void OnSMSOUTChanging(System.Nullable<double> value);
    partial void OnSMSOUTChanged();
    #endregion
	
	public SMSs()
	{
		this._Cell = default(EntityRef<Cell>);
		this._Country = default(EntityRef<Country>);
		this._DateTime = default(EntityRef<DateTime>);
		OnCreated();
	}
	
	public string DateID
	{
		get
		{
			return this._DateID;
		}
		set
		{
			if ((this._DateID != value))
			{
				if (this._DateTime.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDateIDChanging(value);
				this.SendPropertyChanging();
				this._DateID = value;
				this.SendPropertyChanged("DateID");
				this.OnDateIDChanged();
			}
		}
	}
	
	public int CellID
	{
		get
		{
			return this._CellID;
		}
		set
		{
			if ((this._CellID != value))
			{
				if (this._Cell.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCellIDChanging(value);
				this.SendPropertyChanging();
				this._CellID = value;
				this.SendPropertyChanged("CellID");
				this.OnCellIDChanged();
			}
		}
	}
	
	public int CountryCode
	{
		get
		{
			return this._CountryCode;
		}
		set
		{
			if ((this._CountryCode != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryCodeChanging(value);
				this.SendPropertyChanging();
				this._CountryCode = value;
				this.SendPropertyChanged("CountryCode");
				this.OnCountryCodeChanged();
			}
		}
	}
	
	public System.Nullable<double> SMSIN
	{
		get
		{
			return this._SMSIN;
		}
		set
		{
			if ((this._SMSIN != value))
			{
				this.OnSMSINChanging(value);
				this.SendPropertyChanging();
				this._SMSIN = value;
				this.SendPropertyChanged("SMSIN");
				this.OnSMSINChanged();
			}
		}
	}
	
	public System.Nullable<double> SMSOUT
	{
		get
		{
			return this._SMSOUT;
		}
		set
		{
			if ((this._SMSOUT != value))
			{
				this.OnSMSOUTChanging(value);
				this.SendPropertyChanging();
				this._SMSOUT = value;
				this.SendPropertyChanged("SMSOUT");
				this.OnSMSOUTChanged();
			}
		}
	}
	
	public Cell Cell
	{
		get
		{
			return this._Cell.Entity;
		}
		set
		{
			Cell previousValue = this._Cell.Entity;
			if (((previousValue != value) 
						|| (this._Cell.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cell.Entity = null;
					previousValue.SMSses.Remove(this);
				}
				this._Cell.Entity = value;
				if ((value != null))
				{
					value.SMSses.Add(this);
					this._CellID = value.CellID;
				}
				else
				{
					this._CellID = default(int);
				}
				this.SendPropertyChanged("Cell");
			}
		}
	}
	
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.SMSses.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.SMSses.Add(this);
					this._CountryCode = value.CountryCode;
				}
				else
				{
					this._CountryCode = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public DateTime DateTime
	{
		get
		{
			return this._DateTime.Entity;
		}
		set
		{
			DateTime previousValue = this._DateTime.Entity;
			if (((previousValue != value) 
						|| (this._DateTime.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DateTime.Entity = null;
					previousValue.SMSses.Remove(this);
				}
				this._DateTime.Entity = value;
				if ((value != null))
				{
					value.SMSses.Add(this);
					this._DateID = value.DateTimeID;
				}
				else
				{
					this._DateID = default(string);
				}
				this.SendPropertyChanged("DateTime");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class Cell : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CellID;
	
	private EntitySet<Call> _Calls;
	
	private EntitySet<SMSs> _SMSses;
	
	private EntitySet<CellProvinceInteraction> _CellProvinceInteractions;
	
	private EntitySet<InternetConn> _InternetConns;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    #endregion
	
	public Cell()
	{
		this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
		this._SMSses = new EntitySet<SMSs>(new Action<SMSs>(this.attach_SMSses), new Action<SMSs>(this.detach_SMSses));
		this._CellProvinceInteractions = new EntitySet<CellProvinceInteraction>(new Action<CellProvinceInteraction>(this.attach_CellProvinceInteractions), new Action<CellProvinceInteraction>(this.detach_CellProvinceInteractions));
		this._InternetConns = new EntitySet<InternetConn>(new Action<InternetConn>(this.attach_InternetConns), new Action<InternetConn>(this.detach_InternetConns));
		OnCreated();
	}
	
	public int CellID
	{
		get
		{
			return this._CellID;
		}
		set
		{
			if ((this._CellID != value))
			{
				this.OnCellIDChanging(value);
				this.SendPropertyChanging();
				this._CellID = value;
				this.SendPropertyChanged("CellID");
				this.OnCellIDChanged();
			}
		}
	}
	
	public EntitySet<Call> Calls
	{
		get
		{
			return this._Calls;
		}
		set
		{
			this._Calls.Assign(value);
		}
	}
	
	public EntitySet<SMSs> SMSses
	{
		get
		{
			return this._SMSses;
		}
		set
		{
			this._SMSses.Assign(value);
		}
	}
	
	public EntitySet<CellProvinceInteraction> CellProvinceInteractions
	{
		get
		{
			return this._CellProvinceInteractions;
		}
		set
		{
			this._CellProvinceInteractions.Assign(value);
		}
	}
	
	public EntitySet<InternetConn> InternetConns
	{
		get
		{
			return this._InternetConns;
		}
		set
		{
			this._InternetConns.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Calls(Call entity)
	{
		this.SendPropertyChanging();
		entity.Cell = this;
	}
	
	private void detach_Calls(Call entity)
	{
		this.SendPropertyChanging();
		entity.Cell = null;
	}
	
	private void attach_SMSses(SMSs entity)
	{
		this.SendPropertyChanging();
		entity.Cell = this;
	}
	
	private void detach_SMSses(SMSs entity)
	{
		this.SendPropertyChanging();
		entity.Cell = null;
	}
	
	private void attach_CellProvinceInteractions(CellProvinceInteraction entity)
	{
		this.SendPropertyChanging();
		entity.Cell = this;
	}
	
	private void detach_CellProvinceInteractions(CellProvinceInteraction entity)
	{
		this.SendPropertyChanging();
		entity.Cell = null;
	}
	
	private void attach_InternetConns(InternetConn entity)
	{
		this.SendPropertyChanging();
		entity.Cell = this;
	}
	
	private void detach_InternetConns(InternetConn entity)
	{
		this.SendPropertyChanging();
		entity.Cell = null;
	}
}

public partial class CellProvinceInteraction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CellID;
	
	private string _ProvinceID;
	
	private System.Nullable<double> _Cell2Province;
	
	private System.Nullable<double> _Province2Cell;
	
	private EntityRef<Cell> _Cell;
	
	private EntityRef<Province> _Province;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    partial void OnProvinceIDChanging(string value);
    partial void OnProvinceIDChanged();
    partial void OnCell2ProvinceChanging(System.Nullable<double> value);
    partial void OnCell2ProvinceChanged();
    partial void OnProvince2CellChanging(System.Nullable<double> value);
    partial void OnProvince2CellChanged();
    #endregion
	
	public CellProvinceInteraction()
	{
		this._Cell = default(EntityRef<Cell>);
		this._Province = default(EntityRef<Province>);
		OnCreated();
	}
	
	public int CellID
	{
		get
		{
			return this._CellID;
		}
		set
		{
			if ((this._CellID != value))
			{
				if (this._Cell.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCellIDChanging(value);
				this.SendPropertyChanging();
				this._CellID = value;
				this.SendPropertyChanged("CellID");
				this.OnCellIDChanged();
			}
		}
	}
	
	public string ProvinceID
	{
		get
		{
			return this._ProvinceID;
		}
		set
		{
			if ((this._ProvinceID != value))
			{
				if (this._Province.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProvinceIDChanging(value);
				this.SendPropertyChanging();
				this._ProvinceID = value;
				this.SendPropertyChanged("ProvinceID");
				this.OnProvinceIDChanged();
			}
		}
	}
	
	public System.Nullable<double> Cell2Province
	{
		get
		{
			return this._Cell2Province;
		}
		set
		{
			if ((this._Cell2Province != value))
			{
				this.OnCell2ProvinceChanging(value);
				this.SendPropertyChanging();
				this._Cell2Province = value;
				this.SendPropertyChanged("Cell2Province");
				this.OnCell2ProvinceChanged();
			}
		}
	}
	
	public System.Nullable<double> Province2Cell
	{
		get
		{
			return this._Province2Cell;
		}
		set
		{
			if ((this._Province2Cell != value))
			{
				this.OnProvince2CellChanging(value);
				this.SendPropertyChanging();
				this._Province2Cell = value;
				this.SendPropertyChanged("Province2Cell");
				this.OnProvince2CellChanged();
			}
		}
	}
	
	public Cell Cell
	{
		get
		{
			return this._Cell.Entity;
		}
		set
		{
			Cell previousValue = this._Cell.Entity;
			if (((previousValue != value) 
						|| (this._Cell.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cell.Entity = null;
					previousValue.CellProvinceInteractions.Remove(this);
				}
				this._Cell.Entity = value;
				if ((value != null))
				{
					value.CellProvinceInteractions.Add(this);
					this._CellID = value.CellID;
				}
				else
				{
					this._CellID = default(int);
				}
				this.SendPropertyChanged("Cell");
			}
		}
	}
	
	public Province Province
	{
		get
		{
			return this._Province.Entity;
		}
		set
		{
			Province previousValue = this._Province.Entity;
			if (((previousValue != value) 
						|| (this._Province.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Province.Entity = null;
					previousValue.CellProvinceInteractions.Remove(this);
				}
				this._Province.Entity = value;
				if ((value != null))
				{
					value.CellProvinceInteractions.Add(this);
					this._ProvinceID = value.ProvinceID;
				}
				else
				{
					this._ProvinceID = default(string);
				}
				this.SendPropertyChanged("Province");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CountryCode;
	
	private string _ProvinceID;
	
	private string _CountryName;
	
	private EntitySet<Call> _Calls;
	
	private EntitySet<SMSs> _SMSses;
	
	private EntitySet<InternetConn> _InternetConns;
	
	private EntityRef<Province> _Province;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(int value);
    partial void OnCountryCodeChanged();
    partial void OnProvinceIDChanging(string value);
    partial void OnProvinceIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
	
	public Country()
	{
		this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
		this._SMSses = new EntitySet<SMSs>(new Action<SMSs>(this.attach_SMSses), new Action<SMSs>(this.detach_SMSses));
		this._InternetConns = new EntitySet<InternetConn>(new Action<InternetConn>(this.attach_InternetConns), new Action<InternetConn>(this.detach_InternetConns));
		this._Province = default(EntityRef<Province>);
		OnCreated();
	}
	
	public int CountryCode
	{
		get
		{
			return this._CountryCode;
		}
		set
		{
			if ((this._CountryCode != value))
			{
				this.OnCountryCodeChanging(value);
				this.SendPropertyChanging();
				this._CountryCode = value;
				this.SendPropertyChanged("CountryCode");
				this.OnCountryCodeChanged();
			}
		}
	}
	
	public string ProvinceID
	{
		get
		{
			return this._ProvinceID;
		}
		set
		{
			if ((this._ProvinceID != value))
			{
				if (this._Province.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProvinceIDChanging(value);
				this.SendPropertyChanging();
				this._ProvinceID = value;
				this.SendPropertyChanged("ProvinceID");
				this.OnProvinceIDChanged();
			}
		}
	}
	
	public string CountryName
	{
		get
		{
			return this._CountryName;
		}
		set
		{
			if ((this._CountryName != value))
			{
				this.OnCountryNameChanging(value);
				this.SendPropertyChanging();
				this._CountryName = value;
				this.SendPropertyChanged("CountryName");
				this.OnCountryNameChanged();
			}
		}
	}
	
	public EntitySet<Call> Calls
	{
		get
		{
			return this._Calls;
		}
		set
		{
			this._Calls.Assign(value);
		}
	}
	
	public EntitySet<SMSs> SMSses
	{
		get
		{
			return this._SMSses;
		}
		set
		{
			this._SMSses.Assign(value);
		}
	}
	
	public EntitySet<InternetConn> InternetConns
	{
		get
		{
			return this._InternetConns;
		}
		set
		{
			this._InternetConns.Assign(value);
		}
	}
	
	public Province Province
	{
		get
		{
			return this._Province.Entity;
		}
		set
		{
			Province previousValue = this._Province.Entity;
			if (((previousValue != value) 
						|| (this._Province.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Province.Entity = null;
					previousValue.Countries.Remove(this);
				}
				this._Province.Entity = value;
				if ((value != null))
				{
					value.Countries.Add(this);
					this._ProvinceID = value.ProvinceID;
				}
				else
				{
					this._ProvinceID = default(string);
				}
				this.SendPropertyChanged("Province");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Calls(Call entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_Calls(Call entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_SMSses(SMSs entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_SMSses(SMSs entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
	
	private void attach_InternetConns(InternetConn entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_InternetConns(InternetConn entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

public partial class DateTime : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DateTimeID;
	
	private int _Day;
	
	private int _Month;
	
	private int _Year;
	
	private int _Hour;
	
	private int _Minute;
	
	private EntitySet<Call> _Calls;
	
	private EntitySet<SMSs> _SMSses;
	
	private EntitySet<InternetConn> _InternetConns;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateTimeIDChanging(string value);
    partial void OnDateTimeIDChanged();
    partial void OnDayChanging(int value);
    partial void OnDayChanged();
    partial void OnMonthChanging(int value);
    partial void OnMonthChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnHourChanging(int value);
    partial void OnHourChanged();
    partial void OnMinuteChanging(int value);
    partial void OnMinuteChanged();
    #endregion
	
	public DateTime()
	{
		this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
		this._SMSses = new EntitySet<SMSs>(new Action<SMSs>(this.attach_SMSses), new Action<SMSs>(this.detach_SMSses));
		this._InternetConns = new EntitySet<InternetConn>(new Action<InternetConn>(this.attach_InternetConns), new Action<InternetConn>(this.detach_InternetConns));
		OnCreated();
	}
	
	public string DateTimeID
	{
		get
		{
			return this._DateTimeID;
		}
		set
		{
			if ((this._DateTimeID != value))
			{
				this.OnDateTimeIDChanging(value);
				this.SendPropertyChanging();
				this._DateTimeID = value;
				this.SendPropertyChanged("DateTimeID");
				this.OnDateTimeIDChanged();
			}
		}
	}
	
	public int Day
	{
		get
		{
			return this._Day;
		}
		set
		{
			if ((this._Day != value))
			{
				this.OnDayChanging(value);
				this.SendPropertyChanging();
				this._Day = value;
				this.SendPropertyChanged("Day");
				this.OnDayChanged();
			}
		}
	}
	
	public int Month
	{
		get
		{
			return this._Month;
		}
		set
		{
			if ((this._Month != value))
			{
				this.OnMonthChanging(value);
				this.SendPropertyChanging();
				this._Month = value;
				this.SendPropertyChanged("Month");
				this.OnMonthChanged();
			}
		}
	}
	
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	public int Hour
	{
		get
		{
			return this._Hour;
		}
		set
		{
			if ((this._Hour != value))
			{
				this.OnHourChanging(value);
				this.SendPropertyChanging();
				this._Hour = value;
				this.SendPropertyChanged("Hour");
				this.OnHourChanged();
			}
		}
	}
	
	public int Minute
	{
		get
		{
			return this._Minute;
		}
		set
		{
			if ((this._Minute != value))
			{
				this.OnMinuteChanging(value);
				this.SendPropertyChanging();
				this._Minute = value;
				this.SendPropertyChanged("Minute");
				this.OnMinuteChanged();
			}
		}
	}
	
	public EntitySet<Call> Calls
	{
		get
		{
			return this._Calls;
		}
		set
		{
			this._Calls.Assign(value);
		}
	}
	
	public EntitySet<SMSs> SMSses
	{
		get
		{
			return this._SMSses;
		}
		set
		{
			this._SMSses.Assign(value);
		}
	}
	
	public EntitySet<InternetConn> InternetConns
	{
		get
		{
			return this._InternetConns;
		}
		set
		{
			this._InternetConns.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Calls(Call entity)
	{
		this.SendPropertyChanging();
		entity.DateTime = this;
	}
	
	private void detach_Calls(Call entity)
	{
		this.SendPropertyChanging();
		entity.DateTime = null;
	}
	
	private void attach_SMSses(SMSs entity)
	{
		this.SendPropertyChanging();
		entity.DateTime = this;
	}
	
	private void detach_SMSses(SMSs entity)
	{
		this.SendPropertyChanging();
		entity.DateTime = null;
	}
	
	private void attach_InternetConns(InternetConn entity)
	{
		this.SendPropertyChanging();
		entity.DateTime = this;
	}
	
	private void detach_InternetConns(InternetConn entity)
	{
		this.SendPropertyChanging();
		entity.DateTime = null;
	}
}

public partial class InternetConn : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DateID;
	
	private int _CellID;
	
	private int _CountryCode;
	
	private System.Nullable<double> _NetTraffic;
	
	private EntityRef<Cell> _Cell;
	
	private EntityRef<Country> _Country;
	
	private EntityRef<DateTime> _DateTime;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateIDChanging(string value);
    partial void OnDateIDChanged();
    partial void OnCellIDChanging(int value);
    partial void OnCellIDChanged();
    partial void OnCountryCodeChanging(int value);
    partial void OnCountryCodeChanged();
    partial void OnNetTrafficChanging(System.Nullable<double> value);
    partial void OnNetTrafficChanged();
    #endregion
	
	public InternetConn()
	{
		this._Cell = default(EntityRef<Cell>);
		this._Country = default(EntityRef<Country>);
		this._DateTime = default(EntityRef<DateTime>);
		OnCreated();
	}
	
	public string DateID
	{
		get
		{
			return this._DateID;
		}
		set
		{
			if ((this._DateID != value))
			{
				if (this._DateTime.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDateIDChanging(value);
				this.SendPropertyChanging();
				this._DateID = value;
				this.SendPropertyChanged("DateID");
				this.OnDateIDChanged();
			}
		}
	}
	
	public int CellID
	{
		get
		{
			return this._CellID;
		}
		set
		{
			if ((this._CellID != value))
			{
				if (this._Cell.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCellIDChanging(value);
				this.SendPropertyChanging();
				this._CellID = value;
				this.SendPropertyChanged("CellID");
				this.OnCellIDChanged();
			}
		}
	}
	
	public int CountryCode
	{
		get
		{
			return this._CountryCode;
		}
		set
		{
			if ((this._CountryCode != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryCodeChanging(value);
				this.SendPropertyChanging();
				this._CountryCode = value;
				this.SendPropertyChanged("CountryCode");
				this.OnCountryCodeChanged();
			}
		}
	}
	
	public System.Nullable<double> NetTraffic
	{
		get
		{
			return this._NetTraffic;
		}
		set
		{
			if ((this._NetTraffic != value))
			{
				this.OnNetTrafficChanging(value);
				this.SendPropertyChanging();
				this._NetTraffic = value;
				this.SendPropertyChanged("NetTraffic");
				this.OnNetTrafficChanged();
			}
		}
	}
	
	public Cell Cell
	{
		get
		{
			return this._Cell.Entity;
		}
		set
		{
			Cell previousValue = this._Cell.Entity;
			if (((previousValue != value) 
						|| (this._Cell.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Cell.Entity = null;
					previousValue.InternetConns.Remove(this);
				}
				this._Cell.Entity = value;
				if ((value != null))
				{
					value.InternetConns.Add(this);
					this._CellID = value.CellID;
				}
				else
				{
					this._CellID = default(int);
				}
				this.SendPropertyChanged("Cell");
			}
		}
	}
	
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.InternetConns.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.InternetConns.Add(this);
					this._CountryCode = value.CountryCode;
				}
				else
				{
					this._CountryCode = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public DateTime DateTime
	{
		get
		{
			return this._DateTime.Entity;
		}
		set
		{
			DateTime previousValue = this._DateTime.Entity;
			if (((previousValue != value) 
						|| (this._DateTime.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DateTime.Entity = null;
					previousValue.InternetConns.Remove(this);
				}
				this._DateTime.Entity = value;
				if ((value != null))
				{
					value.InternetConns.Add(this);
					this._DateID = value.DateTimeID;
				}
				else
				{
					this._DateID = default(string);
				}
				this.SendPropertyChanged("DateTime");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ProvinceID;
	
	private string _ProvinceName;
	
	private EntitySet<CellProvinceInteraction> _CellProvinceInteractions;
	
	private EntitySet<Country> _Countries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(string value);
    partial void OnProvinceIDChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    #endregion
	
	public Province()
	{
		this._CellProvinceInteractions = new EntitySet<CellProvinceInteraction>(new Action<CellProvinceInteraction>(this.attach_CellProvinceInteractions), new Action<CellProvinceInteraction>(this.detach_CellProvinceInteractions));
		this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
		OnCreated();
	}
	
	public string ProvinceID
	{
		get
		{
			return this._ProvinceID;
		}
		set
		{
			if ((this._ProvinceID != value))
			{
				this.OnProvinceIDChanging(value);
				this.SendPropertyChanging();
				this._ProvinceID = value;
				this.SendPropertyChanged("ProvinceID");
				this.OnProvinceIDChanged();
			}
		}
	}
	
	public string ProvinceName
	{
		get
		{
			return this._ProvinceName;
		}
		set
		{
			if ((this._ProvinceName != value))
			{
				this.OnProvinceNameChanging(value);
				this.SendPropertyChanging();
				this._ProvinceName = value;
				this.SendPropertyChanged("ProvinceName");
				this.OnProvinceNameChanged();
			}
		}
	}
	
	public EntitySet<CellProvinceInteraction> CellProvinceInteractions
	{
		get
		{
			return this._CellProvinceInteractions;
		}
		set
		{
			this._CellProvinceInteractions.Assign(value);
		}
	}
	
	public EntitySet<Country> Countries
	{
		get
		{
			return this._Countries;
		}
		set
		{
			this._Countries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CellProvinceInteractions(CellProvinceInteraction entity)
	{
		this.SendPropertyChanging();
		entity.Province = this;
	}
	
	private void detach_CellProvinceInteractions(CellProvinceInteraction entity)
	{
		this.SendPropertyChanging();
		entity.Province = null;
	}
	
	private void attach_Countries(Country entity)
	{
		this.SendPropertyChanging();
		entity.Province = this;
	}
	
	private void detach_Countries(Country entity)
	{
		this.SendPropertyChanging();
		entity.Province = null;
	}
}
#pragma warning restore 1591
